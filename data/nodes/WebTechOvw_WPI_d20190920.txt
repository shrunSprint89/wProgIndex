Web prog
	Problem solving
		For individual languages
		General
			Algorithms
        Big O notation
          standard for measuring complexity
          the complexity / performance of the algorithm, as a measure of the input size
        Sorting algos
          Selection sort
            Explanation
              start from first
              check each elem with every other elem
              whenever more correct value for that list position is found, swap
            Characteristics
              time - O(n^2)
              space - no extra space - in place sort
              stable sort
              number of comparisions / swaps - O(n)
              non-adaptive 
          Bubble sort
            Explanation
              Bubble the smallest element to start of list through every iteration
            Characteristics
              time - O(n^2)
              space - no extra space - in place sort
              stable sort
              number of comparisions / swaps - O(n^2)
              adaptive
      Data Structures
				Lists
					Arrays
				Maps
	Programming methodology / habits / practice
		Methodology
      Agile
      Waterfall
		Practice
			SOLID
	Languages
		Java
		Python
		JS (JavaScript)
      Why care?
        Language of the browser
        Server side runtime has made this a full-stack language (NodeJS)
			Basics
				Type system
          Dynamically typed
            Variables do not have any types. Only values have types
            Variables can hold values of any type
					Types
						value that has properties and methods
						every value in TS has a type
						new Date() has a Date type
						Primitive type
						Object type
        Higher order functions
          Functions that allow us to pass functions as params or produce functions as return value
          Allows us to pass 'what to do' part along with data to a function
          Allows us to reuse code - keep code DRY
			Primary motive
        Began as a client-side scripting language
        Has evolved to be a full-featured full-stack language
			Structure
				Fucntional and OO
		TS (TypeScript)
			Why care?
        Type checking and other features of TS make coding easier, more efficient
			Basics
        Superset of JS
          Type checking
          More features
				Compiles to plain old JS
				Type system
          TS code is type-checked at compile-time
					Types
						value that has properties and methods
						every value in TS has a type
						new Date() has a Date type
						Primitive type
						Object type
				Type annotations vs Type inference
					Annotation - Types specified in code
					Inference - TS infers type from value assigned
			Primary motive
        Type checking, better compile-time error checking
          Issues can be identified by code-checkers while coding
				More features over JS
			Structure
				Fucntional and OO
				Superset of JS
	Maintainabilty
		Readable code
		Dcoumentation
	FWs and libraries, existing solutions, design patterns
		Design patterns
		Libraries
		Open source code, other solutions
		FWs
			Angular
				Key files
					main.ts
					app.module.ts
					app.component.ts
					index.html
				Key features
					Bootstrapping
						Write components for NativeScript, or Cordova, or any other environment
            Import platform depending on the environment for bootstrapping
					Modules
            Classes that bring specific blocks of app functionality together
					Directives
            Classes that manipulate DOM
					Components
						Whole application can be modeled as a tree of components
            Actually a directive
						Section that controls portion of the screen real estate
              view and code that controls the view
					Services
            Classes - hold common functionality for injection when needed
					Decorators
            Metadata about classes/functions/properties
            Gives additional data to Angular
						@Input()
							Used to get data from the component's parent.
						@Output()
              Used for passing data to parent component
							EventEmitter
                Used to emit an event outside a component
				Purpose
          Sync b/w state and UI
            Model to View Synchronization is taken care of elegantly
					Separation of concerns - MVC
					Code for actual generation of view, like HTML tag creation, is abstracted away
          Right way to do things and consistency
	Toolset
		Dev
			Editors
        VS Code
        Atom editor
        Neovim
        Vim
			Debugging tools
				Chrome debugger
				Firefox debugger
				Firefox dev release
		Test
			Testing tools
				Jasmine
				Karma
		Release
			Build tools
				Webpack
		Maintenance
			Monitoring
			Fix tools